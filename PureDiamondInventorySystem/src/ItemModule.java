
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Sherlock Holmes
 */
public class ItemModule extends javax.swing.JFrame {

    /**
     * Creates new form ItemModuleFrame
     */
    public ItemModule() {
        initComponents();
        fillComboBox();
        tableload();
        loadcombox();
        
    }
    
    Connection con;         //create the connection object con
    PreparedStatement pst; // create the PreparedStatement object pst
    ResultSet rs;          // create the ResultSet object rs
    Statement stmt;         // create the Statement object stmt
    DefaultTableModel model = null; 
    public void connect(){ 
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/db_inventory_lagria", "root", "");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(BrandModule.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(BrandModule.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
     public void ItemSearch(String str){
        model = (DefaultTableModel)ItemTable.getModel();
        TableRowSorter<DefaultTableModel> trs = new TableRowSorter<>(model);
        ItemTable.setRowSorter(trs);
        trs.setRowFilter(RowFilter.regexFilter(str));
    }
     public void loadcombox(){
         CMB_ItemUOM.setSelectedIndex(-1);
         CMB_BrandID_FK1.setSelectedIndex(-1);
     }
    private void tableload(){
        try {
            connect();
            pst = con.prepareStatement("Select * From tbl_items");
            rs = pst.executeQuery();
            
            ResultSetMetaData RSD = rs.getMetaData();
            int count;
            
            count = RSD.getColumnCount();
            DefaultTableModel DTM = (DefaultTableModel)ItemTable.getModel();
            DTM.setRowCount(0);
            
            while(rs.next()){
                Vector v = new Vector();
                for(int i = 1; i < count; i++){
                    v.add(rs.getString("ItemID"));
                    v.add(rs.getString("ItemName"));
                    v.add(rs.getString("ItemPrice"));
                    v.add(rs.getString("ItemUOM"));
                    v.add(rs.getString("BrandID"));
                    v.add(rs.getString("MinStock"));
                    v.add(rs.getString("ReorderQty"));
                    v.add(rs.getString("isActive"));
                }
               DTM.addRow(v);
            }
       
        } catch (SQLException ex) {
            Logger.getLogger(BrandModule.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void fillComboBox(){
        try {
            connect();
            String sql = "Select BrandName From tbl_brand";
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery();
            
            while(rs.next()){

                String BrandName = rs.getString("BrandName");
                CMB_BrandID_FK1.addItem(BrandName);
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(ItemModule.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        TF_ItemID = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        TF_ItemName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        TF_ItemPrice = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        CMB_ItemUOM = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        TF_MinStock = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        TF_ReorderQty = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        CMB_IsActive = new javax.swing.JComboBox<>();
        CMB_BrandID_FK1 = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        DeleteBtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        Add_Btn = new javax.swing.JButton();
        ResetBtn = new javax.swing.JButton();
        TF_Search = new javax.swing.JTextField();
        SearchBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ItemTable = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Item ID:");

        TF_ItemID.setEnabled(false);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Item Name:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Item Price:");

        TF_ItemPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TF_ItemPriceKeyTyped(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Item UOM:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Brand ID:");

        CMB_ItemUOM.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pc", "Pack/2s", "Pack/24s", "Box/10s" }));

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Min Stock:");

        TF_MinStock.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TF_MinStockKeyTyped(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Reorder QTY:");

        TF_ReorderQty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TF_ReorderQtyActionPerformed(evt);
            }
        });
        TF_ReorderQty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TF_ReorderQtyKeyTyped(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("IsActive:");

        CMB_IsActive.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Yes", "No" }));
        CMB_IsActive.setSelectedIndex(-1);
        CMB_IsActive.setToolTipText("");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(CMB_ItemUOM, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(TF_ItemPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(TF_ItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(TF_ItemID, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(20, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(CMB_BrandID_FK1, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(TF_MinStock, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(TF_ReorderQty, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                            .addComponent(CMB_IsActive, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(16, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(TF_ItemID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(TF_ItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(TF_ItemPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(CMB_ItemUOM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(CMB_BrandID_FK1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(TF_MinStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(TF_ReorderQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(CMB_IsActive, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jPanel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        DeleteBtn.setText("Delete");
        DeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteBtnActionPerformed(evt);
            }
        });

        editBtn.setText("Edit");
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        Add_Btn.setText("Add");
        Add_Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Add_BtnActionPerformed(evt);
            }
        });

        ResetBtn.setText("Reset");
        ResetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(ResetBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addComponent(Add_Btn, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(DeleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DeleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Add_Btn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ResetBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        TF_Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TF_SearchActionPerformed(evt);
            }
        });
        TF_Search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TF_SearchKeyReleased(evt);
            }
        });

        SearchBtn.setText("Search");
        SearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchBtnActionPerformed(evt);
            }
        });

        ItemTable.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ItemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Item Name", "Item Price", "Item UOM ", "Brand ID", "Min Stock", "Reorder Qty", "IsActive"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ItemTable.setEnabled(false);
        jScrollPane1.setViewportView(ItemTable);
        if (ItemTable.getColumnModel().getColumnCount() > 0) {
            ItemTable.getColumnModel().getColumn(0).setResizable(false);
            ItemTable.getColumnModel().getColumn(0).setPreferredWidth(60);
            ItemTable.getColumnModel().getColumn(1).setResizable(false);
            ItemTable.getColumnModel().getColumn(1).setPreferredWidth(400);
            ItemTable.getColumnModel().getColumn(2).setResizable(false);
            ItemTable.getColumnModel().getColumn(3).setResizable(false);
            ItemTable.getColumnModel().getColumn(3).setPreferredWidth(100);
            ItemTable.getColumnModel().getColumn(4).setResizable(false);
            ItemTable.getColumnModel().getColumn(5).setResizable(false);
            ItemTable.getColumnModel().getColumn(6).setResizable(false);
            ItemTable.getColumnModel().getColumn(7).setResizable(false);
        }

        jButton5.setText("Return");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(TF_Search)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SearchBtn))
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(40, 40, 40)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 902, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TF_Search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SearchBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1250, 620));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void DeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteBtnActionPerformed
        
        if (TF_Search.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter id number in the search bar");
        }else{
        
        try {
            stmt = con.createStatement();
            int ID = Integer.parseInt(TF_Search.getText());
            connect();
            
            pst = con.prepareStatement("Delete From tbl_items where ItemID = ?");
            pst.setInt(1, ID);
            int k = pst.executeUpdate();
            
            if(k==1){
                JOptionPane.showMessageDialog(this, "Record Deleted");
                TF_ItemID.setText("");
                TF_ItemName.setText("");
                TF_ItemPrice.setText("");
                TF_MinStock.setText("");
                TF_ReorderQty.setText("");
                TF_Search.setText("");
                CMB_ItemUOM.setSelectedIndex(-1);
                CMB_IsActive.setSelectedIndex(-1);
                CMB_BrandID_FK1.setSelectedIndex(-1);
                tableload();
            }else{
                JOptionPane.showMessageDialog(this, "Record Not Deleted");
                tableload();
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(ItemModule.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
    }//GEN-LAST:event_DeleteBtnActionPerformed

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
      
            if(TF_Search.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, "Please enter id number in the search bar");
            }
            else if(TF_ItemName.getText().isEmpty() || TF_ItemPrice.getText().isEmpty() ||
                    TF_MinStock.getText().isEmpty() || TF_ReorderQty.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, "All fields are required. Please ensure all fields are\n" +
                    "completed.");
            }
            else{
                try {
                    
                connect();
                stmt = con.createStatement();
                int ID = Integer.parseInt(TF_ItemID.getText());
                String ItemName = TF_ItemName.getText();
                Float ItemPrice = Float.parseFloat(TF_ItemPrice.getText());
                
                String ItemUom = CMB_ItemUOM.getSelectedItem().toString();
                
                Integer BrandName = CMB_BrandID_FK1.getSelectedIndex()+1;
                String BrandName1 = CMB_BrandID_FK1.getSelectedItem().toString();
                int MinStock = Integer.parseInt(TF_MinStock.getText());
                int ReorderQty = Integer.parseInt(TF_ReorderQty.getText());
                String IsActive = CMB_IsActive.getSelectedItem().toString();
                
                String sql = "Select ItemID, ItemName, ItemPrice, ItemUOM, BrandID, MinStock, ReorderQty, isActive "
                        + "From tbl_items "
                        + "Where ItemName='"+ItemName+"' AND ItemPrice='"+ItemPrice+"'"
                        + "AND ItemUOM='"+ItemUom+"' AND BrandID='"+BrandName+"' "
                        + "AND MinStock='"+MinStock+"'AND ReorderQty='"+ReorderQty+"' AND isActive = '"+IsActive+"' ";
                
                ResultSet Rs1 = stmt.executeQuery(sql);
                
                if (Rs1.next()) {
                    if (ItemName != Rs1.getString("ItemName")){
                        //JOptionPane.showMessageDialog(this, "No Action");
                    }
                }else{
                    
                    String sqlA = "Select BrandID From tbl_brand Where BrandName ='"+BrandName1+"'";
                    ResultSet rsA =stmt.executeQuery(sqlA); //Getting the BrandID
                    
                    if (rsA.next()) {
                        
                        int Id = Integer.parseInt(rsA.getString("BrandID"));
                        
                        String sql2 = "SELECT ItemName FROM tbl_items WHERE ItemName = '"+ItemName+"' except(SELECT ItemName FROM tbl_items WHERE ItemID= '"+ID+"')"; 
                         ResultSet rs2 = stmt.executeQuery(sql2);

                         if (rs2.next()) {
                             
                             if (ItemName != rs2.getString("ItemName")){
                            
                                JOptionPane.showMessageDialog(this, "Item Already Exist");
                             }  
                             }else{
                                pst = con.prepareStatement("update tbl_items set ItemName = ?, ItemPrice = ?, ItemUOM = ?, BrandID = ?, MinStock = ?, ReorderQty = ?, isActive =? WHERE ItemID = ?");
                                pst.setString(1, ItemName);
                                pst.setFloat(2, ItemPrice);
                                pst.setString(3, ItemUom);
                                pst.setInt(4, Id);
                                pst.setInt(5, MinStock);
                                pst.setInt(6, ReorderQty);
                                pst.setString(7, IsActive);
                                pst.setInt(8, ID);
                                pst.executeUpdate();

                                TF_ItemID.setText("");
                                TF_ItemName.setText("");
                                TF_ItemPrice.setText("");
                                TF_MinStock.setText("");
                                CMB_ItemUOM.setSelectedIndex(-1);
                                TF_ReorderQty.setText("");
                                TF_Search.setText("");
                                CMB_BrandID_FK1.setSelectedIndex(-1);
                                CMB_IsActive.setSelectedIndex(-1);
                                JOptionPane.showMessageDialog(this, "Succesfully Updated");
                                tableload();
                    }
                }else{
                            JOptionPane.showMessageDialog(this, "Error");
         }
    }
                
                } catch (SQLException ex) {
                     Logger.getLogger(ItemModule.class.getName()).log(Level.SEVERE, null, ex);
                } catch (NumberFormatException ex){
                     JOptionPane.showMessageDialog(this, "Please input numerical value");
                }catch(NullPointerException ex){
            JOptionPane.showMessageDialog(this, "All fields are required. Please ensure all fields are\n" +
                    "completed.");
            }
                
            }

        

    }//GEN-LAST:event_editBtnActionPerformed

    private void Add_BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Add_BtnActionPerformed
        try {
            
        String ItemName = TF_ItemName.getText();
        Float ItemPrice = Float.parseFloat(TF_ItemPrice.getText());
        String ItemUom = CMB_ItemUOM.getSelectedItem().toString();
        String BrandName = CMB_BrandID_FK1.getSelectedItem().toString();
        int MinStock = Integer.parseInt(TF_MinStock.getText());
        int ReorderQty = Integer.parseInt(TF_ReorderQty.getText());
        String IsActive = CMB_IsActive.getSelectedItem().toString();
            

            if(TF_ItemName.getText().isEmpty() || TF_ItemPrice.getText().isEmpty() ||
                    TF_MinStock.getText().isEmpty() || TF_ReorderQty.getText().isEmpty() ||
                    CMB_ItemUOM.getSelectedItem() == null || CMB_IsActive.getSelectedItem() == null){
                
                JOptionPane.showMessageDialog(this, "All fields are required. Please ensure all fields are\n" +
                    "completed.");
           
            }else{   
               
                    connect();
                    stmt = con.createStatement();
            
                    
                    
                    String sql = "Select * From tbl_items Where ItemName= '"+ItemName+"'";
                    ResultSet Rs1 = stmt.executeQuery(sql);
                
                    if (Rs1.next()) {
                        JOptionPane.showMessageDialog(this, "Item is Already Exist");
                        
                }else{
                    
                    String sql2 = "Select BrandID From tbl_brand where BrandName = '"+BrandName+"'";
                    ResultSet Rs2 = stmt.executeQuery(sql2);
                    
                    
                    if(Rs2.next()){
                        int a = Rs2.getInt("BrandID");
                        
                        pst = con.prepareStatement("Insert Into tbl_items(ItemName, ItemPrice, ItemUOM, BrandID, MinStock, ReorderQty, isActive) values(?, ?, ?, ?, ?, ?, ?)");
                        pst.setString(1, ItemName);
                        pst.setFloat(2, ItemPrice);
                        pst.setString(3, ItemUom);
                        pst.setInt(4, a);
                        pst.setInt(5, MinStock);
                        pst.setInt(6, ReorderQty);
                        pst.setString(7, IsActive);
                        
                        pst.executeUpdate();
                        TF_ItemID.setText("");
                        TF_ItemName.setText("");
                        TF_ItemPrice.setText("");
                        TF_MinStock.setText("");
                        TF_ReorderQty.setText("");
                        TF_Search.setText("");
                        CMB_ItemUOM.setSelectedIndex(-1);
                        CMB_IsActive.setSelectedIndex(-1);
                        CMB_BrandID_FK1.setSelectedIndex(-1);
                        
                        JOptionPane.showMessageDialog(this, "Item is Added");
                        tableload();
                   
                    }
 
                }

             }
          } catch (SQLException ex) {
            Logger.getLogger(ItemModule.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Please Enter Decimal");
          } 
         catch(NumberFormatException ex){
           JOptionPane.showMessageDialog(this, "All fields are required. Please ensure all fields are\n" +
                    "completed.");
         }catch(NullPointerException ex){
            JOptionPane.showMessageDialog(this, "All fields are required. Please ensure all fields are\n" +
                    "completed.");
         }

    }//GEN-LAST:event_Add_BtnActionPerformed

    private void ResetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetBtnActionPerformed
       TF_ItemID.setText("");
       TF_ItemName.setText("");
       TF_ItemPrice.setText("");
       CMB_IsActive.setSelectedIndex(-1);
       TF_MinStock.setText("");
       TF_ReorderQty.setText("");
       CMB_ItemUOM.setSelectedIndex(-1);
       CMB_BrandID_FK1.setSelectedIndex(-1);
       TF_Search.setText("");
       tableload();
        
    }//GEN-LAST:event_ResetBtnActionPerformed

    private void SearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchBtnActionPerformed
        try {
            connect();
            pst = con.prepareStatement("Select a.ItemID, a.ItemName, a.ItemPrice, a.ItemUOM, b.BrandName, a.MinStock, a.ReorderQty, a.isActive From tbl_items a INNER JOIN tbl_brand b on a.BrandID = b.BrandID Where ItemID = ?" );
            int ID = Integer.parseInt(TF_Search.getText());
            pst.setInt(1, ID);
            
            ResultSet rs1 = pst.executeQuery();
            
            if(rs1.next() == false){
                JOptionPane.showMessageDialog(this, "Sorry Record Not Found");
                TF_ItemName.setText("");
            }else{
                TF_ItemID.setText(rs1.getString("ItemID"));
                TF_ItemName.setText(rs1.getString("ItemName"));
                TF_ItemPrice.setText(rs1.getString("ItemPrice"));
                CMB_ItemUOM.setSelectedItem(rs1.getString("ItemUOM"));
                CMB_BrandID_FK1.setSelectedItem(rs1.getString("BrandName"));
                TF_MinStock.setText(rs1.getString("MinStock"));
                TF_ReorderQty.setText(rs1.getString("ReorderQty"));
                CMB_IsActive.setSelectedItem(rs1.getString("isActive"));
                
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(ItemModule.class.getName()).log(Level.SEVERE, null, ex);
        }catch(NumberFormatException ex){
            JOptionPane.showMessageDialog(this, "Use id number to update or search the item");
        }

    }//GEN-LAST:event_SearchBtnActionPerformed

    private void TF_SearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TF_SearchKeyReleased
        String search = TF_Search.getText();
        ItemSearch(search);

    }//GEN-LAST:event_TF_SearchKeyReleased

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
       HomeScreen back  = new HomeScreen();
        back.setVisible(true);
        this.setVisible(false);
        this.setDefaultCloseOperation(ItemModule.EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void TF_ReorderQtyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TF_ReorderQtyKeyTyped
       char c = evt.getKeyChar();
        
        if(!Character.isDigit(c)){
            evt.consume();
        }
    }//GEN-LAST:event_TF_ReorderQtyKeyTyped

    private void TF_MinStockKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TF_MinStockKeyTyped
        char c = evt.getKeyChar();
        
        if(!Character.isDigit(c)){
            evt.consume();
        }
    }//GEN-LAST:event_TF_MinStockKeyTyped

    private void TF_ReorderQtyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TF_ReorderQtyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TF_ReorderQtyActionPerformed

    private void TF_ItemPriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TF_ItemPriceKeyTyped
        char c = evt.getKeyChar();
        if (Character.isLetter(c) &&!evt.isAltDown()) {
            evt.consume();
        }
    }//GEN-LAST:event_TF_ItemPriceKeyTyped

    private void TF_SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TF_SearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TF_SearchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ItemModule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ItemModule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ItemModule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ItemModule.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ItemModule().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add_Btn;
    private javax.swing.JComboBox<String> CMB_BrandID_FK1;
    private javax.swing.JComboBox<String> CMB_IsActive;
    private javax.swing.JComboBox<String> CMB_ItemUOM;
    private javax.swing.JButton DeleteBtn;
    private javax.swing.JTable ItemTable;
    private javax.swing.JButton ResetBtn;
    private javax.swing.JButton SearchBtn;
    private javax.swing.JTextField TF_ItemID;
    private javax.swing.JTextField TF_ItemName;
    private javax.swing.JTextField TF_ItemPrice;
    private javax.swing.JTextField TF_MinStock;
    private javax.swing.JTextField TF_ReorderQty;
    private javax.swing.JTextField TF_Search;
    private javax.swing.JButton editBtn;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
