
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Sherlock Holmes
 */
public class SearchFrame extends javax.swing.JFrame {

    /**
     * Creates new form SearchFrame
     */
    DefaultTableModel model = null;
    
    public SearchFrame() {
        initComponents();
        BrandSetTable();
        ItemSetTable();
    }
    
    Connection con;         //create the connection object con
    PreparedStatement pst; // create the PreparedStatement object pst
    ResultSet rs;          // create the ResultSet object rs
    Statement stmt;
    DefaultTableModel dm;// create the Statement object stmt
    public void connect(){ 
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/db_inventory_lagria", "root", "");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(BrandModule.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(BrandModule.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    public void ItemSetTable(){
        try {
            connect();
            PreparedStatement BrandPst = con.prepareStatement("SELECT a.ItemID, a.ItemName, a.ItemPrice, a.ItemUOM, b.BrandName, a.MinStock, a.ReorderQty, a.isActive From tbl_items a INNER JOIN tbl_brand b on a.BrandID = b.BrandID");
            ResultSet rs1 = BrandPst.executeQuery();
            
            while(rs1.next()){
                String ItemID = rs1.getString("ItemID");
                String ItemName = rs1.getString("ItemName");
                String ItemPrice = rs1.getString("ItemPrice");
                String ItemUOM = rs1.getString("ItemUOM");
                String BrandName = rs1.getString("BrandName");
                String MinStock = rs1.getString("MinStock");
                String ReorderQty = rs1.getString("ReorderQty");
                String isActive = rs1.getString("isActive");
                
                Object[] obj = {ItemID, ItemName, ItemPrice, ItemUOM, BrandName, MinStock, ReorderQty, isActive};
                
                model = (DefaultTableModel)ItemTable.getModel();
                model.addRow(obj);
                
                 
            }
        } catch (SQLException ex) {
            Logger.getLogger(SearchFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public void BrandSetTable(){
        try {
            connect();
            PreparedStatement BrandPst = con.prepareStatement("Select * From tbl_brand");
            ResultSet rs1 = BrandPst.executeQuery();
            
            while(rs1.next()){
                String BrandID = rs1.getString("BrandID");
                String BrandName = rs1.getString("BrandName");
                String isActive= rs1.getString("isActive");
                
                Object[] obj = {BrandID, BrandName, isActive};
                
                model = (DefaultTableModel)BrandTbl.getModel();
                model.addRow(obj);
                
                 
            }
        } catch (SQLException ex) {
            Logger.getLogger(SearchFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void BrandSearch(String str){
        model = (DefaultTableModel)BrandTbl.getModel();
        TableRowSorter<DefaultTableModel> trs = new TableRowSorter<>(model);
        BrandTbl.setRowSorter(trs);
        trs.setRowFilter(RowFilter.regexFilter(str));
        
    }
    
    public void ItemSearch(String str){
        model = (DefaultTableModel)ItemTable.getModel();
        TableRowSorter<DefaultTableModel> trs = new TableRowSorter<>(model);
        ItemTable.setRowSorter(trs);
        trs.setRowFilter(RowFilter.regexFilter(str));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        BrandTbl = new javax.swing.JTable();
        SearchTF = new javax.swing.JTextField();
        BackBtnBrand = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ItemTable = new javax.swing.JTable();
        ItemSearchTF = new javax.swing.JTextField();
        BackBtnItem = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        BrandTbl.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        BrandTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Brand ID", "Brand Name", "Is Active"
            }
        ));
        jScrollPane1.setViewportView(BrandTbl);

        SearchTF.setText("Search........");
        SearchTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SearchTFKeyReleased(evt);
            }
        });

        BackBtnBrand.setText("Back");
        BackBtnBrand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackBtnBrandActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SearchTF)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(BackBtnBrand)
                        .addGap(0, 797, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BackBtnBrand)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(SearchTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Brand Search", jPanel1);

        ItemTable.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ItemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Item Name", "Item Price", "Item UOM ", "Brand ID", "Min Stock", "Reorder Qty", "IsActive"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ItemTable.setEnabled(false);
        jScrollPane2.setViewportView(ItemTable);
        if (ItemTable.getColumnModel().getColumnCount() > 0) {
            ItemTable.getColumnModel().getColumn(0).setResizable(false);
            ItemTable.getColumnModel().getColumn(0).setPreferredWidth(30);
            ItemTable.getColumnModel().getColumn(1).setResizable(false);
            ItemTable.getColumnModel().getColumn(1).setPreferredWidth(200);
            ItemTable.getColumnModel().getColumn(2).setResizable(false);
            ItemTable.getColumnModel().getColumn(2).setPreferredWidth(55);
            ItemTable.getColumnModel().getColumn(3).setResizable(false);
            ItemTable.getColumnModel().getColumn(4).setResizable(false);
            ItemTable.getColumnModel().getColumn(4).setPreferredWidth(50);
            ItemTable.getColumnModel().getColumn(5).setResizable(false);
            ItemTable.getColumnModel().getColumn(5).setPreferredWidth(55);
            ItemTable.getColumnModel().getColumn(6).setResizable(false);
            ItemTable.getColumnModel().getColumn(6).setPreferredWidth(50);
            ItemTable.getColumnModel().getColumn(7).setResizable(false);
            ItemTable.getColumnModel().getColumn(7).setPreferredWidth(45);
        }

        ItemSearchTF.setText("Search........");
        ItemSearchTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ItemSearchTFKeyReleased(evt);
            }
        });

        BackBtnItem.setText("Back");
        BackBtnItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackBtnItemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 852, Short.MAX_VALUE)
                    .addComponent(ItemSearchTF)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(BackBtnItem)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BackBtnItem)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ItemSearchTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Item Search", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void SearchTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SearchTFKeyReleased
        
        String search = SearchTF.getText();
        BrandSearch(search);
        
    }//GEN-LAST:event_SearchTFKeyReleased

    private void ItemSearchTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ItemSearchTFKeyReleased
        String search = ItemSearchTF.getText();
        ItemSearch(search);
    }//GEN-LAST:event_ItemSearchTFKeyReleased

    private void BackBtnBrandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackBtnBrandActionPerformed
        HomeScreen back  = new HomeScreen();
        back.setVisible(true);
        this.setVisible(false);
        this.setDefaultCloseOperation(SearchFrame.EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_BackBtnBrandActionPerformed

    private void BackBtnItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackBtnItemActionPerformed
         HomeScreen back  = new HomeScreen();
        back.setVisible(true);
        this.setVisible(false);
        this.setDefaultCloseOperation(SearchFrame.EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_BackBtnItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SearchFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SearchFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SearchFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SearchFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackBtnBrand;
    private javax.swing.JButton BackBtnItem;
    private javax.swing.JTable BrandTbl;
    private javax.swing.JTextField ItemSearchTF;
    private javax.swing.JTable ItemTable;
    private javax.swing.JTextField SearchTF;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables
}
